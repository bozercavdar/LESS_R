))
less <- LESSBase$new()
less$isfitted
less4 <- initialize(new("LESSBase"))
less4
less4$isfitted
less4 <- initialize(new("LESSBase", isFitted= 50L))
less4 <- initialize(new("LESSBase", isFitted= 50))
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isfitted = "numeric"
),
methods = list(
initialize = function(isFitted=100L) {
if(!missing(isFitted)) {
isFitted <- 2*isFitted
}
}
))
less4 <- initialize(new("LESSBase", isFitted= 50))
less4
less4$isfitted
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isfitted = "numeric"
),
methods = list(
initialize = function(isFitted=100L) {
if(!missing(isFitted)) {
print("isfitted is set.")
isFitted <- 2*isFitted
}
}
))
less4 <- initialize(new("LESSBase", isFitted= 50))
less4$isfitted
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isfitted = "numeric"
),
methods = list(
initialize = function(..., isFitted=100L) {
if(!missing(isFitted)) {
print("isfitted is set.")
isFitted <- 2*isFitted
}
callSuper(...)
}
))
less4 <- initialize(new("LESSBase", isFitted= 50))
less4$isfitted
less4 <- LESSBase$new()
less4
less4 <- LESSBase$new(isFitted=50)
gen5 <- setRefClass("myRefClass5",
fields=list(x="numeric",y="character"),
methods=list(initialize=function(..., x=100L)
{x <<- 2*x; y <<- "none"; callSuper(...)}))
gen <- gen5$new()
gen
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isfitted = "numeric",
y = "numeric"
),
methods = list(
initialize = function(..., isFitted=100L) {
# if(!missing(isFitted)) {
#   print("isfitted is set.")
#   isFitted <- 2*isFitted
# }
y <<- 31
callSuper(...)
}
))
less <- LESSBase$new()
less
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isfitted = "numeric",
y = "numeric"
),
methods = list(
initialize = function(..., isFitted=100L) {
# if(!missing(isFitted)) {
#   print("isfitted is set.")
#   isFitted <- 2*isFitted
# }
y <- 31
callSuper(...)
}
))
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isfitted = "numeric",
y = "numeric"
),
methods = list(
initialize = function(..., isFitted=100L) {
# if(!missing(isFitted)) {
#   print("isfitted is set.")
#   isFitted <- 2*isFitted
# }
isFitted <<- isFitted
y <<- 31
callSuper(...)
}
))
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isfitted = "numeric",
y = "numeric"
),
methods = list(
initialize = function(..., isFitted=100L) {
# if(!missing(isFitted)) {
#   print("isfitted is set.")
#   isFitted <- 2*isFitted
# }
isFitted <<- 2*isFitted
y <<- 31
callSuper(...)
}
))
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isFitted = "numeric",
y = "numeric"
),
methods = list(
initialize = function(..., isFitted=100L) {
# if(!missing(isFitted)) {
#   print("isfitted is set.")
#   isFitted <- 2*isFitted
# }
isFitted <<- 2*isFitted
y <<- 31
callSuper(...)
}
))
less <- LESSBase$new()
less
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isFitted = "logical"
),
methods = list(
initialize = function(isFitted=FALSE) {
if(!missing(isFitted)) {
isFitted <- TRUE
}
}
))
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isFitted = "logical"
),
methods = list(
initialize = function(isFitted=FALSE) {
if(!missing(isFitted)) {
isFitted <<- TRUE
}
}
))
less <- LESSBase$new()
less
less1 <- LESSBase$new(isFitted = FALSE)
less1
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isFitted = "numeric"
),
methods = list(
initialize = function(isFitted=0) {
if(!missing(isFitted)) {
isFitted <<- isFitted + 1
}
}
))
less <- LESSBase$new()
less
less1 <- LESSBase$new(isFitted = 1)
less1
less2 <- LESSBase$new(isFitted = 3)
less2
less1
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isFitted = "logical"
),
methods = list(
initialize = function() {
if(missing(isFitted)) {
isFitted <<- FALSE
}
}
))
less <- LESSBase$new()
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isFitted = "logical"
),
methods = list(
initialize = function(...) {
if(missing(isFitted)) {
isFitted <<- FALSE
}
}
))
less <- LESSBase$new()
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isFitted = "logical"
),
methods = list(
initialize = function(isFitted) {
if(missing(isFitted)) {
isFitted <<- FALSE
}
}
))
less <- LESSBase$new()
less
LESSBase <- setRefClass("LESSBase",
fields = list(
# replications
# scobject
isFitted = "logical"
),
methods = list(
initialize = function() {
isFitted <<- FALSE
}
))
less <- LESSBase$new()
less
library(R6)
?R6
usePackage(R6)
library(devtools)
library(R6)
use_package(R6)
use_package(R6Class)
use_package("R6")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
1:50
devtools::load_all(".")
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
install.packages("RANN")
library(devtools)
use_package("RANN")
?nn
?nn2
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
?sample
?nn2
devtools::load_all(".")
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
matrix(0, 10, 5)
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
?sample
?nn2
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
?mean
?rowMeans
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
devtools::load_all(".")
linReg()
?colMeans
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
devtools::load_all(".")
linReg()
install.packages(magrittr)
install.packages("magrittr")
install.packages("magrittr")
use_package("magrittr")
devtools::load_all(".")
linReg()
devtools::load_all(".")
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
linReg()
?names
devtools::load_all(".")
?names
linReg()
?get
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
?matrix
devtools::load_all(".")
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
?predict
devtools::load_all(".")
?predict
?predict
linReg()
?predict.lm
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
devtools::load_all(".")
linReg()
